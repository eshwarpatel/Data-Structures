#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the binary tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node with a given value
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int main() {
		printf("name : S.ESHWAR\n");
	printf("regno : 192210478\n");
	
    // Creating a binary tree manually:
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    // Traversing the binary tree using inorder traversal (left-root-right)
    printf("Inorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    // Traversing the binary tree using preorder traversal (root-left-right)
    printf("Preorder Traversal: ");
    preorderTraversal(root);
    printf("\n");

    // Traversing the binary tree using postorder traversal (left-right-root)
    printf("Postorder Traversal: ");
    postorderTraversal(root);
    printf("\n");

    return 0;
}

// Function to perform an inorder traversal of the binary tree
void inorderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }

    inorderTraversal(root->left);
    printf("%d ", root->data);
    inorderTraversal(root->right);
}

// Function to perform a preorder traversal of the binary tree
void preorderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }

    printf("%d ", root->data);
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

// Function to perform a postorder traversal of the binary tree
void postorderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }

    postorderTraversal(root->left);
    postorderTraversal(root->right);
    printf("%d ", root->data);
}
